// Code generated by mockery v2.44.2. DO NOT EDIT.

package storagemocks

import (
	context "context"

	usersdomain "github.com/rubenbupe/recipe-video-parser/internal/users/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Exists provides a mock function with given fields: ctx, id
func (_m *UserRepository) Exists(ctx context.Context, id usersdomain.UserID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usersdomain.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id usersdomain.UserID) (*usersdomain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *usersdomain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserID) (*usersdomain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserID) *usersdomain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usersdomain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usersdomain.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserRepository) Save(ctx context.Context, user usersdomain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *UserRepository) GetByName(ctx context.Context, name usersdomain.UserName) (*usersdomain.User, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *usersdomain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserName) (*usersdomain.User, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserName) *usersdomain.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usersdomain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usersdomain.UserName) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByApiKey provides a mock function with given fields: ctx, apiKey
func (_m *UserRepository) GetByApiKey(ctx context.Context, apiKey usersdomain.UserApiKey) (*usersdomain.User, error) {
	ret := _m.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for GetByApiKey")
	}

	var r0 *usersdomain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserApiKey) (*usersdomain.User, error)); ok {
		return rf(ctx, apiKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserApiKey) *usersdomain.User); ok {
		r0 = rf(ctx, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usersdomain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usersdomain.UserApiKey) error); ok {
		r1 = rf(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsByName provides a mock function with given fields: ctx, name
func (_m *UserRepository) ExistsByName(ctx context.Context, name usersdomain.UserName) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserName) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usersdomain.UserName) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usersdomain.UserName) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
